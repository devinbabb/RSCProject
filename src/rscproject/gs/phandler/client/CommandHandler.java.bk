package org.rscdaemon.server.packethandler.client;

import org.rscdaemon.server.packethandler.PacketHandler;
import org.rscdaemon.server.packetbuilder.loginserver.MiscPacketBuilder;
import org.rscdaemon.server.model.*;
import org.rscdaemon.server.net.Packet;
import org.rscdaemon.server.util.DataConversions;
import org.rscdaemon.server.entityhandling.EntityHandler;
import org.rscdaemon.server.util.Logger;
import org.rscdaemon.server.util.Formulae;
import org.rscdaemon.server.util.DataConversions;
import org.rscdaemon.server.event.SingleEvent;
import org.rscdaemon.server.states.CombatState;
import java.util.*;

import org.apache.mina.common.IoSession;

public class CommandHandler implements PacketHandler {
	/**
	 * World instance
	 */
	public static final World world = World.getWorld();

	public void handlePacket(Packet p, IoSession session) throws Exception {
		Player player = (Player)session.getAttachment();
		if(player.isBusy()) {
			player.resetPath();
			return;
		}
		player.resetAll();
		String s = new String(p.getData()).trim();
		int firstSpace = s.indexOf(" ");
		String cmd = s;
		String[] args = new String[0];
		if(firstSpace != -1) {
			cmd = s.substring(0, firstSpace).trim();
			args = s.substring(firstSpace + 1).trim().split(" ");
		}
		try {
			handleCommand(cmd.toLowerCase(), args, player);
		}
		catch(Exception e) { }
	}

	public void handleCommand(String cmd, String[] args, Player player) throws Exception {
		MiscPacketBuilder loginServer = world.getServer().getLoginConnector().getActionSender();
		if(cmd.equals("skull")) {
			int length = 20;
			//try { length = Integer.parseInt(args[0]); } catch(Exception e) { }
			player.addSkull(length * 60000);
			return;
		}
		if(cmd.equals("beta")) {
			for(int i=0; i < 16; i++) {
				player.incExp(i, 300000, false);
			}
			player.getInventory().add(new InvItem(10, 200000));
			player.getActionSender().sendInventory();
			player.getActionSender().sendStats();
			player.getActionSender().sendMessage("BETA starter pack, please report all bugs.");
			return;
		}
		if(cmd.equals("online"))
		{
			player.getActionSender().sendOnlinePlayers();
			return;
		}

		if(cmd.equals("event")) {
			int eventx = world.eventx();
			int eventy = world.eventy();
			int eventlev = world.eventlev();
			if(eventx < 1) { return; }
			if(player.getCombatLevel() != eventlev && eventlev != 0) { 
				player.getActionSender().sendMessage("You need to be level: " + eventlev + " to join this event.");	
				return;
			}
			if(player.getLocation().inModRoom() && !player.isMod()) {
				player.getActionSender().sendMessage("You cannot use that command from here");
			}
			else if(System.currentTimeMillis() - player.getLastMoved() < 10000 || System.currentTimeMillis() - player.getCastTimer() < 10000) {
				player.getActionSender().sendMessage("You must stand still for 10 seconds before using this command.");
			}
			else if(!player.inCombat()) {	
				player.setCastTimer();
				player.teleport(eventx, eventy, true);
			}
		}
		//Start of Quiz shit
		if(cmd.equalsIgnoreCase("quiz")) {
			if(world.Quiz || world.QuizSignup) {
				player.getActionSender().sendMessage("You have joined the Quiz");
				player.inQuiz = true;
			}
		}
		if(cmd.equalsIgnoreCase("a")) {
			player.lastAnswer = "a";
			org.rscdaemon.server.event.Quiz quiz = new org.rscdaemon.server.event.Quiz();
			quiz.handleAnswer(player);
		} else if (cmd.equalsIgnoreCase("b")) {
			player.lastAnswer = "b";
			org.rscdaemon.server.event.Quiz quiz = new org.rscdaemon.server.event.Quiz();
			quiz.handleAnswer(player);
		}  else if (cmd.equalsIgnoreCase("c")) {
			player.lastAnswer = "c";
			org.rscdaemon.server.event.Quiz quiz = new org.rscdaemon.server.event.Quiz();
			quiz.handleAnswer(player);
		}  else if (cmd.equalsIgnoreCase("d")) {
			player.lastAnswer = "d";
			org.rscdaemon.server.event.Quiz quiz = new org.rscdaemon.server.event.Quiz();
			quiz.handleAnswer(player);
		}
		//End of Quiz Shit
		/*if(cmd.equals("stuck")) {
			if(player.getLocation().inModRoom() && !player.isMod()) {
				player.getActionSender().sendMessage("You cannot use ::stuck here");
			}
			else if(!player.isMod() && System.currentTimeMillis() - player.getLastMoved() < 10000 || System.currentTimeMillis() - player.getCastTimer() < 10000) {
				player.getActionSender().sendMessage("There is a 10 second delay on using ::stuck, please stand still for 10 secs");
			}
			else if(!player.inCombat() && System.currentTimeMillis() - player.getCombatTimer() > 10000 || player.isMod()) {
				Logger.mod(player.getUsername() + " used stuck");
				player.setCastTimer();
				player.teleport(122, 647, true);
			}
			else {
				player.getActionSender().sendMessage("You cannot use ::stuck for 10 seconds after combat");
			}
			return;
		}*/
		if(!player.isPMod())
			return;
		
		/*
		 if(cmd.equals("i2f")) {
                        if(args.length != 1) {
                                player.getActionSender().sendMessage("Invalid args. Syntax: i2f name");
                                return;
                        }
                        loginServer.requestPlayerForum(player, DataConversions.usernameToHash(args[0]));
                        return;
                }
		 */
		if(cmd.equals("setevent")) {
			if(args.length < 3) {
				world.seteventx(0);
				player.getActionSender().sendMessage("event reset");
				return;
			}
			int eventx = Integer.parseInt(args[0]);
			int eventy = Integer.parseInt(args[1]);
			int eventlev = Integer.parseInt(args[2]);
			world.seteventx(eventx);
			world.seteventy(eventy);
			world.seteventlev(eventlev);
			player.getActionSender().sendMessage("Event details set");
		}
		if(cmd.equals("info")) {
			if(args.length != 1) {
				player.getActionSender().sendMessage("Invalid args. Syntax: INFO name");
				return;
			}
			loginServer.requestPlayerInfo(player, DataConversions.usernameToHash(args[0]));
			return;
		}
		if(cmd.equals("ban") || cmd.equals("unban")) {
			boolean banned = cmd.equals("ban");
			if(args.length != 1) {
				player.getActionSender().sendMessage("Invalid args. Syntax: " + (banned ? "BAN" : "UNBAN") + " name");
				return;
			}
			loginServer.banPlayer(player, DataConversions.usernameToHash(args[0]), banned);
			return;
		}
		if(cmd.equals("modroom")) {
			Logger.mod(player.getUsername() + " teleported to the mod room");
			player.teleport(70, 1640, true);
			return;
		}
		if(cmd.equals("npc")) {
			/* if(!player.getLocation().inModRoom()) {
				player.getActionSender().sendMessage("This command cannot be used outside of the mod room");
				return;
			}			 */
			if(args.length != 1) {
				player.getActionSender().sendMessage("Invalid args. Syntax: NPC id");
				return;
			}
			int id = Integer.parseInt(args[0]);
			if(EntityHandler.getNpcDef(id) != null) {
				final Npc n = new Npc(id, player.getX(), player.getY(), player.getX() - 2, player.getX() + 2, player.getY() - 2, player.getY() + 2);
				n.setRespawn(false);
				world.registerNpc(n);
				world.getDelayedEventHandler().add(new SingleEvent(null, 60000) {
					public void action() {
						Mob opponent = n.getOpponent();
						if(opponent != null) {
							opponent.resetCombat(CombatState.ERROR);
						}
						n.resetCombat(CombatState.ERROR);
						world.unregisterNpc(n);
						n.remove();
					}
				});
				Logger.mod(player.getUsername() + " spawned a " + n.getDef().getName() + " at " + player.getLocation().toString());
			}
			else {
				player.getActionSender().sendMessage("Invalid id");
			}
			return;
		}
		if(cmd.equals("teleport")) {
			if(args.length != 2) {
				player.getActionSender().sendMessage("Invalid args. Syntax: TELEPORT x y");
				return;
			}
			int x = Integer.parseInt(args[0]);
			int y = Integer.parseInt(args[1]);
			if(world.withinWorld(x, y)) {
				Logger.mod(player.getUsername() + " teleported from " + player.getLocation().toString() + " to (" + x + ", " + y + ")");
				player.teleport(x, y, true);
			}
			else {
				player.getActionSender().sendMessage("Invalid coordinates!");
			}
			return;
		}
		if(cmd.equals("goto") || cmd.equals("summon")) {
			boolean summon = cmd.equals("summon");
			if(args.length != 1) {
				player.getActionSender().sendMessage("Invalid args. Syntax: " + (summon ? "SUMMON" : "GOTO") + " name");
				return;
			}
			long usernameHash = DataConversions.usernameToHash(args[0]);
			Player affectedPlayer = world.getPlayer(usernameHash);
			if(affectedPlayer != null) {
				if(summon) {
					Logger.mod(player.getUsername() + " summoned " + affectedPlayer.getUsername() + " from " + affectedPlayer.getLocation().toString() + " to " + player.getLocation().toString());
					affectedPlayer.teleport(player.getX(), player.getY(), true);
					affectedPlayer.getActionSender().sendMessage("You have been summoned by " + player.getUsername());
				}
				else {
					Logger.mod(player.getUsername() + " went from " + player.getLocation() + " to " + affectedPlayer.getUsername() + " at " + affectedPlayer.getLocation().toString());
					player.teleport(affectedPlayer.getX(), affectedPlayer.getY(), true);
				}
			}
			else {
				player.getActionSender().sendMessage("Invalid player, maybe they aren't currently on this server?");
			}
			return;
		}
		if(cmd.equals("take") || cmd.equals("put")) {
			if(args.length != 1) {
				player.getActionSender().sendMessage("Invalid args. Syntax: TAKE name");
				return;
			}
			Player affectedPlayer = world.getPlayer(DataConversions.usernameToHash(args[0]));
			if(affectedPlayer == null) {
				player.getActionSender().sendMessage("Invalid player, maybe they aren't currently online?");
				return;
			}
			Logger.mod(player.getUsername() + " took " + affectedPlayer.getUsername() + " from " + affectedPlayer.getLocation().toString() + " to admin room");
			affectedPlayer.teleport(78, 1642, true);
			if(cmd.equals("take")) {
				player.teleport(76, 1642, true);
			}
			return;
		}
		if(cmd.equals("invis"))
		{
			if(player.isInvis())
			{
				player.setinvis(false);
			}
			else {
				player.setinvis(true);
			}
			player.getActionSender().sendMessage("Invis status is: " + player.isInvis());
		}

		if(cmd.equals("nopk"))
		{
			if(player.isNoPK())
			{
				player.setnopk(false);
			}
			else {
				player.setnopk(true);
			}
			player.getActionSender().sendMessage("NonPK status is: " + player.isNoPK());
		}

		if(cmd.equals("noaggro"))
		{
			if(player.isNonaggro())
			{
				player.setnonaggro(false);
			}
			else {
				player.setnonaggro(true);
			}
			player.getActionSender().sendMessage("NonAggro status is: " + player.isNonaggro());
		}

		if(cmd.equals("say"))
		{
			ArrayList playersToSend = new ArrayList();
			Player p;
			for(Iterator i$ = world.getPlayers().iterator(); i$.hasNext(); playersToSend.add(p))
				p = (Player)i$.next();
			String newStr = "@gre@";
			for(int i = 0; i < args.length; i++)
				newStr = (new StringBuilder()).append(newStr).append(args[i]).append(" ").toString();
			newStr = (new StringBuilder()).append("#adm#").append(player.getUsername()).append(": ").append(newStr).toString();
			Player pl;
			for(Iterator i$ = playersToSend.iterator(); i$.hasNext(); pl.getActionSender().sendMessage(newStr))
				pl = (Player)i$.next();
		}


		if(!player.isAdmin()) {
			return;
		}

		if(cmd.equals("quest"))
		{
			if(args.length < 2) 
			{
				player.getActionSender().sendMessage("Invalid syntax! ::quest INDEX STAGE");
				return;
			}

			player.setQuestStage(Integer.parseInt(args[0]), Integer.parseInt(args[1]), false);
			player.getActionSender().sendQuestInfo();
			return;
		}
		if(cmd.equals("questpoints"))
		{
			if(args.length < 1) 
			{
				player.getActionSender().sendMessage("Invalid syntax! ::questpoints POINTS");
				return;
			}

			player.setQuestPoints(Integer.parseInt(args[0]), false);
			player.getActionSender().sendQuestInfo();
			return;
		}
		if(cmd.equals("push"))
		{
			if(args.length < 2) 
			{
				player.getActionSender().sendMessage("Invalid syntax! ::push stat xp");
				return;
			}

			int stat = Formulae.getStat(args[0]);
			int exp = Integer.parseInt(args[1]);
			if(stat >= 0 && stat <= 2)
				player.incExp(3, DataConversions.roundUp(exp / 4D), false);

			player.incExp(stat, exp, false);
			player.getActionSender().sendStat(stat);
			return;
		}
		if(cmd.equals("setstats")) 
		{
			int attack = Integer.parseInt(args[0]);
			int defense = Integer.parseInt(args[1]);
			int strength = Integer.parseInt(args[2]);
			int hpxp = 1154 + ((Formulae.levelToExperience(attack) + Formulae.levelToExperience(defense) + Formulae.levelToExperience(strength)) / 3);
			int newHP = Formulae.experienceToLevel(hpxp);

			player.setCurStat(0, attack);
			player.setMaxStat(0, attack);
			player.setExp(0, Formulae.levelToExperience(attack));

			player.setCurStat(1, defense);
			player.setMaxStat(1, defense);
			player.setExp(1, Formulae.levelToExperience(defense));

			player.setCurStat(2, strength);
			player.setMaxStat(2, strength);
			player.setExp(2, Formulae.levelToExperience(strength));

			player.setCurStat(3, newHP);
			player.setMaxStat(3, newHP);
			player.setExp(3, Formulae.levelToExperience(newHP));

			int comb = Formulae.getCombatlevel(player.getMaxStats());
			if(comb != player.getCombatLevel())
				player.setCombatLevel(comb);

			player.getActionSender().sendStats();
			player.getActionSender().sendMessage("Your stats have been set to: " + attack + ", " + defense + ", " + strength + " with HP " + newHP);
			return;
		}

		//Added by Konijn
		if(cmd.equals("grimpock")) {
			if(world.GrimPK())
			{
				world.GrimPK(false);
			}
			else {
				world.GrimPK(true);
			}
			player.getActionSender().sendMessage("Grim PickPocket status is: " + world.GrimPK());
		}


		//if(cmd.equals("noclip")) {
		//	if (args[0]) {
		//	player.setNoclip(args[0]);
		//	player.getActionSender().sendMessage("Noclip mode set to: " + args[0]);
		//	return;
		//	}
		//	player.getActionSender().sendMessage("Invalid args, true or false");
		//	return;
		//}
		if(cmd.equals("startquiz")) {
			org.rscdaemon.server.event.Quiz quiz = new org.rscdaemon.server.event.Quiz();
			quiz.run();
		}

		if(cmd.equals("shutdown")) {
			Logger.mod(player.getUsername() + " shut down the server!");
			world.getServer().kill();
			return;
		}
		if(cmd.equals("update")) {
			String reason = "";
			if(args.length > 0) {
				for(String s : args) {
					reason += (s + " ");
				}
				reason = reason.substring(0, reason.length() - 1);
			}
			if(world.getServer().shutdownForUpdate()) {
				Logger.mod(player.getUsername() + " updated the server: " + reason);
				for(Player p : world.getPlayers()) {
					p.getActionSender().sendAlert("The server will be shutting down in 60 seconds: " + reason, false);
					p.getActionSender().startShutdown(60);
				}
			}
			return;
		}
		if(cmd.equals("appearance")) {
			player.setChangingAppearance(true);
			player.getActionSender().sendAppearanceScreen();
			return;
		}
		if(cmd.equals("item")) {
			if(args.length < 1 || args.length > 2) {
				player.getActionSender().sendMessage("Invalid args. Syntax: ITEM id [amount]");
				return;
			}
			int id = Integer.parseInt(args[0]);
			if(EntityHandler.getItemDef(id).isMembers()) {
				player.getActionSender().sendMessage("You cannot have this item, as it is a members item");
				return;
			}
			if(EntityHandler.getItemDef(id) != null) {
				int amount = 1;
				if(args.length == 2) {
					amount = Integer.parseInt(args[1]);
				} 

				if(EntityHandler.getItemDef(id).isStackable())
					player.getInventory().add(new InvItem(id, amount));
				else
				{
					for(int i = 0; i < amount; i++)
						player.getInventory().add(new InvItem(id, 1));
				}

				player.getActionSender().sendInventory();
				Logger.mod(player.getUsername() + " spawned themself " + amount + " " + EntityHandler.getItemDef(id).getName() + "(s)");
			}
			else {
				player.getActionSender().sendMessage("Invalid id");
			}
			return;
		}
		if(cmd.equals("object")) {
			/* if(!player.getLocation().inModRoom()) {
				player.getActionSender().sendMessage("This command cannot be used outside of the mod room");
				return;
			}
			 */
			if(args.length < 1 || args.length > 2) {
				player.getActionSender().sendMessage("Invalid args. Syntax: OBJECT id [direction]");
				return;
			}
			int id = Integer.parseInt(args[0]);
			if(id < 0) {
				GameObject object = world.getTile(player.getLocation()).getGameObject();
				if(object != null) {
					world.unregisterGameObject(object);
				}
			}
			else if(EntityHandler.getGameObjectDef(id) != null) {
				int dir = args.length == 2 ? Integer.parseInt(args[1]) : 0;
				world.registerGameObject(new GameObject(player.getLocation(), id, dir, 0));
			}
			else {
				player.getActionSender().sendMessage("Invalid id");
			}
			return;
		}
		if(cmd.equals("door")) {
			if(!player.getLocation().inModRoom()) {
				player.getActionSender().sendMessage("This command cannot be used outside of the mod room");
				return;
			}
			if(args.length < 1 || args.length > 2) {
				player.getActionSender().sendMessage("Invalid args. Syntax: DOOR id [direction]");
				return;
			}
			int id = Integer.parseInt(args[0]);
			if(id < 0) {
				GameObject object = world.getTile(player.getLocation()).getGameObject();
				if(object != null) {
					world.unregisterGameObject(object);
				}
			}
			else if(EntityHandler.getDoorDef(id) != null) {
				int dir = args.length == 2 ? Integer.parseInt(args[1]) : 0;
				world.registerGameObject(new GameObject(player.getLocation(), id, dir, 1));
			}
			else {
				player.getActionSender().sendMessage("Invalid id");
			}
			return;
		}
		if (cmd.equals("dropall")) {
			player.getInventory().getItems().clear();
			player.getActionSender().sendInventory();
		}
	}

}
